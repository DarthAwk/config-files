* Emacs Configuration in Org Mode
This configuration is written in org mode. This relies on the init.el
file using org-babel to parse out the embedded emacs lisp code in this
file and loading it into emacs.

See an example of emacs lisp code block delimited between ~begin_src~
and ~end_src~ blocks. The ~begin_src~ declaration needs the language
to be declared and for emacs this is ~emacs-lisp~

#+begin_src emacs-lisp
;; babel needs at least one source block to prevent an error
;; when parsing this file
#+end_src

* Set custom emacs defaults
** Make emacs more friendly

#+begin_src emacs-lisp
;; don't make emacs backup files when the file is saved
(setq make-backup-files nil)

;; changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)

;; use spaces for tabs
(setq-default indent-tabs-mode nil)

;; enable column-mode by default
(setq column-number-mode t)

;; setup ido mode acroos the board
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)

;; set default font size based on operating system
;; height is in 1/10 pt
(cond
 ((eq system-type 'darwin)
  (set-face-attribute 'default nil :height 160)))
#+end_src

** Customize settings in own file

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Packages
** Magit

Magit describes itself as a porcelain for git.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+end_src

** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (helm-mode)
  :bind (("C-x r b" . helm-bookmarks)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)))
#+end_src

** Evil Mode
Evil mode bring vim emulation to emacs. I have added the keychord
dependency so that I can emulate my custome vim bindings. This allows
me to map ~jj~ to escape back into ~normal mode~
I have also mapped the ~;~ key to call ex commands to avoid the need
to use the shift key.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (use-package key-chord
     :load-path "key-chord"
     :config (key-chord-mode 1))
  :config
  (evil-mode 0)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (define-key evil-motion-state-map ";" 'evil-ex)
  :bind (([f12] . evil-mode)))

#+end_src

** Yasnippet
Yasnippet bring textmate like bundles for templating to emacs.
Some textmate bundles can be used by yasnippet.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer 10
  :diminish yas-minor-mode
  :config
  (yas-global-mode)
  (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1))))
#+end_src

** Emmet mode
Emmet mode allows you to create html rapidly using css style commands.

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Go Mode
Go Mode has a hideous tab length so make it 2 by default.

#+begin_src emacs-lisp
(use-package go-mode
  :init
  (add-hook 'go-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)
            (setq tab-width 2))))
#+end_src

** Erlang Mode

If the erlang directory is present then load the erlang emacs tools.

#+BEGIN_SRC emacs-lisp
  (use-package erlang-start
    :if
    (file-exists-p  "/opt/local/lib/erlang/lib/tools-2.8.2/emacs")
    :init
    (setq erlang-root-dir "/opt/local/lib/erlang")
    (setq exec-path (cons "/opt/local/lib/erlang/bin" exec-path))
    :load-path "/opt/local/lib/erlang/lib/tools-2.8.2/emacs")
#+END_SRC

** Alchemist
Alchemist is a tool for Elixir it has support for phoenix and
integrates with mix.

Alchemist is only supported on emacs 24.4 and later

#+begin_src emacs-lisp
(use-package alchemist
  :if (and (>= emacs-major-version 24)
           (>= emacs-minor-version 4))
  :init
  (use-package elixir-mode))
#+end_src
